/*
 * This file is generated by jOOQ.
*/
package provendordb.tables;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import provendordb.DefaultSchema;
import provendordb.tables.records.DbStoredProcedureRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DbStoredProcedure extends TableImpl<DbStoredProcedureRecord> {

    private static final long serialVersionUID = -509142919;

    /**
     * The reference instance of <code>db_stored_procedure</code>
     */
    public static final DbStoredProcedure DB_STORED_PROCEDURE = new DbStoredProcedure();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DbStoredProcedureRecord> getRecordType() {
        return DbStoredProcedureRecord.class;
    }

    /**
     * The column <code>db_stored_procedure.sp_name</code>.
     */
    public final TableField<DbStoredProcedureRecord, String> SP_NAME = createField("sp_name", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>db_stored_procedure.sp_type</code>.
     */
    public final TableField<DbStoredProcedureRecord, String> SP_TYPE = createField("sp_type", org.jooq.impl.SQLDataType.VARCHAR(16), this, "");

    /**
     * The column <code>db_stored_procedure.return_type</code>.
     */
    public final TableField<DbStoredProcedureRecord, String> RETURN_TYPE = createField("return_type", org.jooq.impl.SQLDataType.VARCHAR(16), this, "");

    /**
     * The column <code>db_stored_procedure.arg_count</code>.
     */
    public final TableField<DbStoredProcedureRecord, Integer> ARG_COUNT = createField("arg_count", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>db_stored_procedure.lang</code>.
     */
    public final TableField<DbStoredProcedureRecord, String> LANG = createField("lang", org.jooq.impl.SQLDataType.VARCHAR(16), this, "");

    /**
     * The column <code>db_stored_procedure.target</code>.
     */
    public final TableField<DbStoredProcedureRecord, String> TARGET = createField("target", org.jooq.impl.SQLDataType.VARCHAR(4096), this, "");

    /**
     * The column <code>db_stored_procedure.owner</code>.
     */
    public final TableField<DbStoredProcedureRecord, String> OWNER = createField("owner", org.jooq.impl.SQLDataType.VARCHAR(256), this, "");

    /**
     * The column <code>db_stored_procedure.comment</code>.
     */
    public final TableField<DbStoredProcedureRecord, String> COMMENT = createField("comment", org.jooq.impl.SQLDataType.VARCHAR(1024), this, "");

    /**
     * Create a <code>db_stored_procedure</code> table reference
     */
    public DbStoredProcedure() {
        this(DSL.name("db_stored_procedure"), null);
    }

    /**
     * Create an aliased <code>db_stored_procedure</code> table reference
     */
    public DbStoredProcedure(String alias) {
        this(DSL.name(alias), DB_STORED_PROCEDURE);
    }

    /**
     * Create an aliased <code>db_stored_procedure</code> table reference
     */
    public DbStoredProcedure(Name alias) {
        this(alias, DB_STORED_PROCEDURE);
    }

    private DbStoredProcedure(Name alias, Table<DbStoredProcedureRecord> aliased) {
        this(alias, aliased, null);
    }

    private DbStoredProcedure(Name alias, Table<DbStoredProcedureRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DbStoredProcedure as(String alias) {
        return new DbStoredProcedure(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DbStoredProcedure as(Name alias) {
        return new DbStoredProcedure(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DbStoredProcedure rename(String name) {
        return new DbStoredProcedure(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DbStoredProcedure rename(Name name) {
        return new DbStoredProcedure(name, null);
    }
}
