/*
 * This file is generated by jOOQ.
*/
package provendordb.tables;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import provendordb.DefaultSchema;
import provendordb.tables.records._DbIndexRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class _DbIndex extends TableImpl<_DbIndexRecord> {

    private static final long serialVersionUID = -192339629;

    /**
     * The reference instance of <code>_db_index</code>
     */
    public static final _DbIndex _DB_INDEX = new _DbIndex();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<_DbIndexRecord> getRecordType() {
        return _DbIndexRecord.class;
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled.
     */
    @java.lang.Deprecated
    public final TableField<_DbIndexRecord, Object> CLASS_OF = createField("class_of", org.jooq.impl.SQLDataType.OTHER, this, "");

    /**
     * The column <code>_db_index.index_name</code>.
     */
    public final TableField<_DbIndexRecord, String> INDEX_NAME = createField("index_name", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>_db_index.is_unique</code>.
     */
    public final TableField<_DbIndexRecord, Integer> IS_UNIQUE = createField("is_unique", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>_db_index.key_count</code>.
     */
    public final TableField<_DbIndexRecord, Integer> KEY_COUNT = createField("key_count", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled.
     */
    @java.lang.Deprecated
    public final TableField<_DbIndexRecord, Object> KEY_ATTRS = createField("key_attrs", org.jooq.impl.SQLDataType.OTHER, this, "");

    /**
     * The column <code>_db_index.is_reverse</code>.
     */
    public final TableField<_DbIndexRecord, Integer> IS_REVERSE = createField("is_reverse", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>_db_index.is_primary_key</code>.
     */
    public final TableField<_DbIndexRecord, Integer> IS_PRIMARY_KEY = createField("is_primary_key", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>_db_index.is_foreign_key</code>.
     */
    public final TableField<_DbIndexRecord, Integer> IS_FOREIGN_KEY = createField("is_foreign_key", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>_db_index.filter_expression</code>.
     */
    public final TableField<_DbIndexRecord, String> FILTER_EXPRESSION = createField("filter_expression", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>_db_index.have_function</code>.
     */
    public final TableField<_DbIndexRecord, Integer> HAVE_FUNCTION = createField("have_function", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>_db_index.comment</code>.
     */
    public final TableField<_DbIndexRecord, String> COMMENT = createField("comment", org.jooq.impl.SQLDataType.VARCHAR(1024), this, "");

    /**
     * Create a <code>_db_index</code> table reference
     */
    public _DbIndex() {
        this(DSL.name("_db_index"), null);
    }

    /**
     * Create an aliased <code>_db_index</code> table reference
     */
    public _DbIndex(String alias) {
        this(DSL.name(alias), _DB_INDEX);
    }

    /**
     * Create an aliased <code>_db_index</code> table reference
     */
    public _DbIndex(Name alias) {
        this(alias, _DB_INDEX);
    }

    private _DbIndex(Name alias, Table<_DbIndexRecord> aliased) {
        this(alias, aliased, null);
    }

    private _DbIndex(Name alias, Table<_DbIndexRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public _DbIndex as(String alias) {
        return new _DbIndex(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public _DbIndex as(Name alias) {
        return new _DbIndex(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public _DbIndex rename(String name) {
        return new _DbIndex(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public _DbIndex rename(Name name) {
        return new _DbIndex(name, null);
    }
}
