/*
 * This file is generated by jOOQ.
*/
package provendordb.tables;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import provendordb.DefaultSchema;
import provendordb.tables.records.DbClassRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DbClass extends TableImpl<DbClassRecord> {

    private static final long serialVersionUID = -601171178;

    /**
     * The reference instance of <code>db_class</code>
     */
    public static final DbClass DB_CLASS = new DbClass();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DbClassRecord> getRecordType() {
        return DbClassRecord.class;
    }

    /**
     * The column <code>db_class.class_name</code>.
     */
    public final TableField<DbClassRecord, String> CLASS_NAME = createField("class_name", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>db_class.owner_name</code>.
     */
    public final TableField<DbClassRecord, String> OWNER_NAME = createField("owner_name", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>db_class.class_type</code>.
     */
    public final TableField<DbClassRecord, String> CLASS_TYPE = createField("class_type", org.jooq.impl.SQLDataType.VARCHAR(6), this, "");

    /**
     * The column <code>db_class.is_system_class</code>.
     */
    public final TableField<DbClassRecord, String> IS_SYSTEM_CLASS = createField("is_system_class", org.jooq.impl.SQLDataType.VARCHAR(3), this, "");

    /**
     * The column <code>db_class.partitioned</code>.
     */
    public final TableField<DbClassRecord, String> PARTITIONED = createField("partitioned", org.jooq.impl.SQLDataType.VARCHAR(3), this, "");

    /**
     * The column <code>db_class.is_reuse_oid_class</code>.
     */
    public final TableField<DbClassRecord, String> IS_REUSE_OID_CLASS = createField("is_reuse_oid_class", org.jooq.impl.SQLDataType.VARCHAR(3), this, "");

    /**
     * The column <code>db_class.collation</code>.
     */
    public final TableField<DbClassRecord, String> COLLATION = createField("collation", org.jooq.impl.SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>db_class.comment</code>.
     */
    public final TableField<DbClassRecord, String> COMMENT = createField("comment", org.jooq.impl.SQLDataType.VARCHAR(2048), this, "");

    /**
     * Create a <code>db_class</code> table reference
     */
    public DbClass() {
        this(DSL.name("db_class"), null);
    }

    /**
     * Create an aliased <code>db_class</code> table reference
     */
    public DbClass(String alias) {
        this(DSL.name(alias), DB_CLASS);
    }

    /**
     * Create an aliased <code>db_class</code> table reference
     */
    public DbClass(Name alias) {
        this(alias, DB_CLASS);
    }

    private DbClass(Name alias, Table<DbClassRecord> aliased) {
        this(alias, aliased, null);
    }

    private DbClass(Name alias, Table<DbClassRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DbClass as(String alias) {
        return new DbClass(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DbClass as(Name alias) {
        return new DbClass(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DbClass rename(String name) {
        return new DbClass(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DbClass rename(Name name) {
        return new DbClass(name, null);
    }
}
