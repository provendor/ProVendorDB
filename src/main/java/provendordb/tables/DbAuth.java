/*
 * This file is generated by jOOQ.
*/
package provendordb.tables;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import provendordb.DefaultSchema;
import provendordb.tables.records.DbAuthRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DbAuth extends TableImpl<DbAuthRecord> {

    private static final long serialVersionUID = 1150775358;

    /**
     * The reference instance of <code>db_auth</code>
     */
    public static final DbAuth DB_AUTH = new DbAuth();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DbAuthRecord> getRecordType() {
        return DbAuthRecord.class;
    }

    /**
     * The column <code>db_auth.grantor_name</code>.
     */
    public final TableField<DbAuthRecord, String> GRANTOR_NAME = createField("grantor_name", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>db_auth.grantee_name</code>.
     */
    public final TableField<DbAuthRecord, String> GRANTEE_NAME = createField("grantee_name", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>db_auth.class_name</code>.
     */
    public final TableField<DbAuthRecord, String> CLASS_NAME = createField("class_name", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>db_auth.auth_type</code>.
     */
    public final TableField<DbAuthRecord, String> AUTH_TYPE = createField("auth_type", org.jooq.impl.SQLDataType.VARCHAR(7), this, "");

    /**
     * The column <code>db_auth.is_grantable</code>.
     */
    public final TableField<DbAuthRecord, String> IS_GRANTABLE = createField("is_grantable", org.jooq.impl.SQLDataType.VARCHAR(3), this, "");

    /**
     * Create a <code>db_auth</code> table reference
     */
    public DbAuth() {
        this(DSL.name("db_auth"), null);
    }

    /**
     * Create an aliased <code>db_auth</code> table reference
     */
    public DbAuth(String alias) {
        this(DSL.name(alias), DB_AUTH);
    }

    /**
     * Create an aliased <code>db_auth</code> table reference
     */
    public DbAuth(Name alias) {
        this(alias, DB_AUTH);
    }

    private DbAuth(Name alias, Table<DbAuthRecord> aliased) {
        this(alias, aliased, null);
    }

    private DbAuth(Name alias, Table<DbAuthRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DbAuth as(String alias) {
        return new DbAuth(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DbAuth as(Name alias) {
        return new DbAuth(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DbAuth rename(String name) {
        return new DbAuth(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DbAuth rename(Name name) {
        return new DbAuth(name, null);
    }
}
