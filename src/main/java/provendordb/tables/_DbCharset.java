/*
 * This file is generated by jOOQ.
*/
package provendordb.tables;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import provendordb.DefaultSchema;
import provendordb.tables.records._DbCharsetRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class _DbCharset extends TableImpl<_DbCharsetRecord> {

    private static final long serialVersionUID = 1996038558;

    /**
     * The reference instance of <code>_db_charset</code>
     */
    public static final _DbCharset _DB_CHARSET = new _DbCharset();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<_DbCharsetRecord> getRecordType() {
        return _DbCharsetRecord.class;
    }

    /**
     * The column <code>_db_charset.charset_id</code>.
     */
    public final TableField<_DbCharsetRecord, Integer> CHARSET_ID = createField("charset_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>_db_charset.charset_name</code>.
     */
    public final TableField<_DbCharsetRecord, String> CHARSET_NAME = createField("charset_name", org.jooq.impl.SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>_db_charset.default_collation</code>.
     */
    public final TableField<_DbCharsetRecord, Integer> DEFAULT_COLLATION = createField("default_collation", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>_db_charset.char_size</code>.
     */
    public final TableField<_DbCharsetRecord, Integer> CHAR_SIZE = createField("char_size", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>_db_charset</code> table reference
     */
    public _DbCharset() {
        this(DSL.name("_db_charset"), null);
    }

    /**
     * Create an aliased <code>_db_charset</code> table reference
     */
    public _DbCharset(String alias) {
        this(DSL.name(alias), _DB_CHARSET);
    }

    /**
     * Create an aliased <code>_db_charset</code> table reference
     */
    public _DbCharset(Name alias) {
        this(alias, _DB_CHARSET);
    }

    private _DbCharset(Name alias, Table<_DbCharsetRecord> aliased) {
        this(alias, aliased, null);
    }

    private _DbCharset(Name alias, Table<_DbCharsetRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public _DbCharset as(String alias) {
        return new _DbCharset(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public _DbCharset as(Name alias) {
        return new _DbCharset(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public _DbCharset rename(String name) {
        return new _DbCharset(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public _DbCharset rename(Name name) {
        return new _DbCharset(name, null);
    }
}
