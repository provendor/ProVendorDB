/*
 * This file is generated by jOOQ.
*/
package provendordb.tables;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import provendordb.DefaultSchema;
import provendordb.tables.records.DbTriggerRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DbTrigger extends TableImpl<DbTriggerRecord> {

    private static final long serialVersionUID = -795453228;

    /**
     * The reference instance of <code>db_trigger</code>
     */
    public static final DbTrigger DB_TRIGGER = new DbTrigger();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DbTriggerRecord> getRecordType() {
        return DbTriggerRecord.class;
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled.
     */
    @java.lang.Deprecated
    public final TableField<DbTriggerRecord, Object> OWNER = createField("owner", org.jooq.impl.SQLDataType.OTHER, this, "");

    /**
     * The column <code>db_trigger.name</code>.
     */
    public final TableField<DbTriggerRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(1073741823), this, "");

    /**
     * The column <code>db_trigger.status</code>.
     */
    public final TableField<DbTriggerRecord, Integer> STATUS = createField("status", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("2", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>db_trigger.priority</code>.
     */
    public final TableField<DbTriggerRecord, Double> PRIORITY = createField("priority", org.jooq.impl.SQLDataType.DOUBLE.defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.DOUBLE)), this, "");

    /**
     * The column <code>db_trigger.event</code>.
     */
    public final TableField<DbTriggerRecord, Integer> EVENT = createField("event", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("12", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled.
     */
    @java.lang.Deprecated
    public final TableField<DbTriggerRecord, Object> TARGET_CLASS = createField("target_class", org.jooq.impl.SQLDataType.OTHER, this, "");

    /**
     * The column <code>db_trigger.target_attribute</code>.
     */
    public final TableField<DbTriggerRecord, String> TARGET_ATTRIBUTE = createField("target_attribute", org.jooq.impl.SQLDataType.VARCHAR(1073741823), this, "");

    /**
     * The column <code>db_trigger.target_class_attribute</code>.
     */
    public final TableField<DbTriggerRecord, Integer> TARGET_CLASS_ATTRIBUTE = createField("target_class_attribute", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>db_trigger.condition_type</code>.
     */
    public final TableField<DbTriggerRecord, Integer> CONDITION_TYPE = createField("condition_type", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>db_trigger.condition</code>.
     */
    public final TableField<DbTriggerRecord, String> CONDITION = createField("condition", org.jooq.impl.SQLDataType.VARCHAR(1073741823), this, "");

    /**
     * The column <code>db_trigger.condition_time</code>.
     */
    public final TableField<DbTriggerRecord, Integer> CONDITION_TIME = createField("condition_time", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>db_trigger.action_type</code>.
     */
    public final TableField<DbTriggerRecord, Integer> ACTION_TYPE = createField("action_type", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>db_trigger.action_definition</code>.
     */
    public final TableField<DbTriggerRecord, String> ACTION_DEFINITION = createField("action_definition", org.jooq.impl.SQLDataType.VARCHAR(1073741823), this, "");

    /**
     * The column <code>db_trigger.action_time</code>.
     */
    public final TableField<DbTriggerRecord, Integer> ACTION_TIME = createField("action_time", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>db_trigger.comment</code>.
     */
    public final TableField<DbTriggerRecord, String> COMMENT = createField("comment", org.jooq.impl.SQLDataType.VARCHAR(1024), this, "");

    /**
     * Create a <code>db_trigger</code> table reference
     */
    public DbTrigger() {
        this(DSL.name("db_trigger"), null);
    }

    /**
     * Create an aliased <code>db_trigger</code> table reference
     */
    public DbTrigger(String alias) {
        this(DSL.name(alias), DB_TRIGGER);
    }

    /**
     * Create an aliased <code>db_trigger</code> table reference
     */
    public DbTrigger(Name alias) {
        this(alias, DB_TRIGGER);
    }

    private DbTrigger(Name alias, Table<DbTriggerRecord> aliased) {
        this(alias, aliased, null);
    }

    private DbTrigger(Name alias, Table<DbTriggerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DbTrigger as(String alias) {
        return new DbTrigger(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DbTrigger as(Name alias) {
        return new DbTrigger(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DbTrigger rename(String name) {
        return new DbTrigger(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DbTrigger rename(Name name) {
        return new DbTrigger(name, null);
    }
}
