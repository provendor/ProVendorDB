/*
 * This file is generated by jOOQ.
*/
package provendordb.tables;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import provendordb.DefaultSchema;
import provendordb.tables.records.DbPasswordRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DbPassword extends TableImpl<DbPasswordRecord> {

    private static final long serialVersionUID = 142126276;

    /**
     * The reference instance of <code>db_password</code>
     */
    public static final DbPassword DB_PASSWORD = new DbPassword();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DbPasswordRecord> getRecordType() {
        return DbPasswordRecord.class;
    }

    /**
     * The column <code>db_password.password</code>.
     */
    public final TableField<DbPasswordRecord, String> PASSWORD = createField("password", org.jooq.impl.SQLDataType.VARCHAR(1073741823), this, "");

    /**
     * Create a <code>db_password</code> table reference
     */
    public DbPassword() {
        this(DSL.name("db_password"), null);
    }

    /**
     * Create an aliased <code>db_password</code> table reference
     */
    public DbPassword(String alias) {
        this(DSL.name(alias), DB_PASSWORD);
    }

    /**
     * Create an aliased <code>db_password</code> table reference
     */
    public DbPassword(Name alias) {
        this(alias, DB_PASSWORD);
    }

    private DbPassword(Name alias, Table<DbPasswordRecord> aliased) {
        this(alias, aliased, null);
    }

    private DbPassword(Name alias, Table<DbPasswordRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DbPassword as(String alias) {
        return new DbPassword(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DbPassword as(Name alias) {
        return new DbPassword(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DbPassword rename(String name) {
        return new DbPassword(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DbPassword rename(Name name) {
        return new DbPassword(name, null);
    }
}
